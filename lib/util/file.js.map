{"version":3,"sources":["../../src/util/file.ts","../../src/util/index.ts"],"sourcesContent":["import fs from 'fs-extra'\nimport os from 'os'\nimport { loggerError, loggerSuccess, loggerInfo } from './index'\n\n\nexport const loadFile = <T = {}>(path: string, system: boolean = true): T | false | undefined => {\n  const rePath = system ? `${os.homedir()}/${path}` : path\n\n  try {\n    if (!fs.pathExistsSync(rePath)) {\n      return false\n    }\n    const data = fs.readJsonSync(rePath);\n    return data\n  } catch (err) {\n    loggerError(`Error reading file from disk: ${rePath}`);\n  }\n}\n\nexport const existsFile = (path: string, system: boolean = true) => {\n  const rePath = system ? `${os.homedir()}/${path}` : path\n  loggerInfo(rePath)\n  return fs.pathExistsSync(rePath)\n}\n\n/**\n * @description: 写入文件\n * @param {string} path\n * @param {string} fileName\n * @param {string} file\n * @return {*}\n */\nexport const writeFile = (path: string, fileName: string, file: object, system: boolean = true) => {\n  const rePath = system ? `${os.homedir()}/${path}` : path\n  loggerInfo(rePath)\n  try {\n    fs.outputJsonSync(`${rePath}/${fileName}`, file)\n    loggerSuccess('Writing file successful!')\n  } catch (err) {\n    loggerError(`Error writing file from disk: ${err}`);\n  }\n}","import { resolve } from 'path'\nimport chalk from 'chalk'\n\n// 项目本地路径\nexport const getDirPath = (relPath: string = '') => {\n  return resolve(__dirname, relPath)\n}\n\n// 获取运行路径\nexport const getCwdPath = (relPath: string = '') => {\n  return resolve(process.cwd(), relPath)\n}\n\n// 计时日志\nexport const loggerTiming = (str: string = '', start: boolean = true) => {\n  if (start) {\n    console.time('Timing')\n    console.log(chalk.cyan(`****** ${str} START ******`))\n  } else {\n    console.log(chalk.cyan(`****** ${str} END ******`))\n    console.timeEnd('Timing')\n  }\n}\n\n// 普通日志\nexport const loggerInfo = (str: string = '') => {\n  console.log(chalk.green(`[INFO]： ${str}`));\n}\n\n// 警告日志\nexport const loggerWarring = (str: string = '') => {\n  console.log(chalk.yellowBright(`[WARRING]： ${str}`));\n}\n\n// 成功日志\nexport const loggerSuccess = (str: string = '') => {\n  console.log(chalk.greenBright(`[SUCCESS]： ${str}`));\n}\n\n// 报错日志\nexport const loggerError = (str: string = '') => {\n  console.log(chalk.redBright(`[ERROR]： ${str}`));\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAe;AACf,gBAAe;;;ACAf,mBAAkB;AAwBX,IAAM,aAAa,CAAC,MAAc,OAAO;AAC9C,UAAQ,IAAI,qBAAM,MAAM,gBAAW,KAAK,CAAC;AAC3C;AAQO,IAAM,gBAAgB,CAAC,MAAc,OAAO;AACjD,UAAQ,IAAI,qBAAM,YAAY,mBAAc,KAAK,CAAC;AACpD;AAGO,IAAM,cAAc,CAAC,MAAc,OAAO;AAC/C,UAAQ,IAAI,qBAAM,UAAU,iBAAY,KAAK,CAAC;AAChD;;;ADrCO,IAAM,WAAW,CAAS,MAAc,SAAkB,SAAgC;AAC/F,QAAM,SAAS,SAAS,GAAG,kBAAG,QAAQ,KAAK,SAAS;AAEpD,MAAI;AACF,QAAI,CAAC,wBAAG,eAAe,MAAM,GAAG;AAC9B,aAAO;AAAA,IACT;AACA,UAAM,OAAO,wBAAG,aAAa,MAAM;AACnC,WAAO;AAAA,EACT,SAAS,KAAP;AACA,gBAAY,iCAAiC,QAAQ;AAAA,EACvD;AACF;AAEO,IAAM,aAAa,CAAC,MAAc,SAAkB,SAAS;AAClE,QAAM,SAAS,SAAS,GAAG,kBAAG,QAAQ,KAAK,SAAS;AACpD,aAAW,MAAM;AACjB,SAAO,wBAAG,eAAe,MAAM;AACjC;AASO,IAAM,YAAY,CAAC,MAAc,UAAkB,MAAc,SAAkB,SAAS;AACjG,QAAM,SAAS,SAAS,GAAG,kBAAG,QAAQ,KAAK,SAAS;AACpD,aAAW,MAAM;AACjB,MAAI;AACF,4BAAG,eAAe,GAAG,UAAU,YAAY,IAAI;AAC/C,kBAAc,0BAA0B;AAAA,EAC1C,SAAS,KAAP;AACA,gBAAY,iCAAiC,KAAK;AAAA,EACpD;AACF;","names":[]}