{"version":3,"sources":["../../src/util/npm.ts","../../src/util/index.ts"],"sourcesContent":["import { loggerError, loggerInfo, loggerWarring } from '@/util';\nimport latestVersion from 'latest-version';\nimport shelljs from 'shelljs'\n\nconst packageInfo = require('../../package.json');\n\nconst parseVersion = (ver: string) => {\n  return Number(ver.split('.').toString())\n}\n\nexport const checkVersion = async () => {\n  const latestVer = await latestVersion('@boty-design/fe-cli');\n  if (parseVersion(latestVer) > parseVersion(packageInfo.version)) {\n    loggerWarring(`The current version is the :  ${latestVer}`)\n  } else {\n    loggerInfo('The current version is the latest:')\n  }\n}\n\nexport const existNpm = async (packageName: string) => {\n  try {\n    const latestVer = await latestVersion(packageName);\n    return latestVer\n  } catch (error) {\n    loggerError(error as string)\n    process.exit(1)\n  }\n}\n\nexport const npmInstall = async (packageName: string) => {\n  try {\n    shelljs.exec(`yarn add ${packageName}`, { cwd: process.cwd() });\n  } catch (error) {\n    loggerError(error as string)\n    process.exit(1)\n  }\n}","import { resolve } from 'path'\nimport chalk from 'chalk'\n\n// 项目本地路径\nexport const getDirPath = (relPath: string = '') => {\n  return resolve(__dirname, relPath)\n}\n\n// 获取运行路径\nexport const getCwdPath = (relPath: string = '') => {\n  return resolve(process.cwd(), relPath)\n}\n\n// 计时日志\nexport const loggerTiming = (str: string = '', start: boolean = true) => {\n  if (start) {\n    console.time('Timing')\n    console.log(chalk.cyan(`****** ${str} START ******`))\n  } else {\n    console.log(chalk.cyan(`****** ${str} END ******`))\n    console.timeEnd('Timing')\n  }\n}\n\n// 普通日志\nexport const loggerInfo = (str: string = '') => {\n  console.log(chalk.green(`[INFO]： ${str}`));\n}\n\n// 警告日志\nexport const loggerWarring = (str: string = '') => {\n  console.log(chalk.yellowBright(`[WARRING]： ${str}`));\n}\n\n// 成功日志\nexport const loggerSuccess = (str: string = '') => {\n  console.log(chalk.greenBright(`[SUCCESS]： ${str}`));\n}\n\n// 报错日志\nexport const loggerError = (str: string = '') => {\n  console.log(chalk.redBright(`[ERROR]： ${str}`));\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,mBAAkB;AAwBX,IAAM,aAAa,CAAC,MAAc,OAAO;AAC9C,UAAQ,IAAI,qBAAM,MAAM,gBAAW,KAAK,CAAC;AAC3C;AAGO,IAAM,gBAAgB,CAAC,MAAc,OAAO;AACjD,UAAQ,IAAI,qBAAM,aAAa,mBAAc,KAAK,CAAC;AACrD;AAQO,IAAM,cAAc,CAAC,MAAc,OAAO;AAC/C,UAAQ,IAAI,qBAAM,UAAU,iBAAY,KAAK,CAAC;AAChD;;;ADzCA,4BAA0B;AAC1B,qBAAoB;AAEpB,IAAM,cAAc;AAEpB,IAAM,eAAe,CAAC,QAAgB;AACpC,SAAO,OAAO,IAAI,MAAM,GAAG,EAAE,SAAS,CAAC;AACzC;AAEO,IAAM,eAAe,YAAY;AACtC,QAAM,YAAY,MAAM,mCAAc,qBAAqB;AAC3D,MAAI,aAAa,SAAS,IAAI,aAAa,YAAY,OAAO,GAAG;AAC/D,kBAAc,iCAAiC,WAAW;AAAA,EAC5D,OAAO;AACL,eAAW,oCAAoC;AAAA,EACjD;AACF;AAEO,IAAM,WAAW,OAAO,gBAAwB;AACrD,MAAI;AACF,UAAM,YAAY,MAAM,mCAAc,WAAW;AACjD,WAAO;AAAA,EACT,SAAS,OAAP;AACA,gBAAY,KAAe;AAC3B,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF;AAEO,IAAM,aAAa,OAAO,gBAAwB;AACvD,MAAI;AACF,2BAAQ,KAAK,YAAY,eAAe,EAAE,KAAK,QAAQ,IAAI,EAAE,CAAC;AAAA,EAChE,SAAS,OAAP;AACA,gBAAY,KAAe;AAC3B,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF;","names":[]}